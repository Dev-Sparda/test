SELECT 
    fecha.FECHA_DATOS,
    subsidiarias.SUBSIDIARIA
    '15694' AS CONCEPTO_C,
    SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE NULL END) AS MONTO_C,
    '15685' AS CONCEPTO_A,
    SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE NULL END) AS MONTO_A,
    '15683' AS CONCEPTO_B,
    SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE NULL END) AS MONTO_B,
    CASE 
        WHEN SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE NULL END) IS NULL THEN NULL
        WHEN SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) > 0 
            AND SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE 0 END) >= 
                CASE WHEN (SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) - 
                          SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE 0 END)) > 0 
                     THEN (SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) - 
                           SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE 0 END))
                     ELSE 0 
                END
            AND SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE 0 END) <= 
                SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END)
        THEN 1 
        ELSE 2 
    END AS RESULTADO
FROM (SELECT 'tu_fecha_here' AS FECHA_DATOS) fecha
CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
LEFT JOIN ENTRADAS e ON fecha.FECHA_DATOS = e.FECHA_DATOS 
    AND subsidiarias.SUBSIDIARIA = e.SUBSIDIARIA
    AND e.CONCEPTO IN ('15685', '15694', '15683')
GROUP BY fecha.FECHA_DATOS, subsidiarias.SUBSIDIARIA;


----2----
WITH datos_entradas AS (
    SELECT 
        FECHA_DATOS,
        SUBSIDIARIA,
        CONCEPTO,
        SUM(MONTO) as MONTO_TOTAL
    FROM ENTRADAS
    WHERE FECHA_DATOS = 'tu_fecha_here'
        AND CONCEPTO IN ('10376', '1093')
    GROUP BY FECHA_DATOS, SUBSIDIARIA, CONCEPTO
),
datos_otra_tabla AS (
    SELECT 
        FECHA_DATOS,
        SUBSIDIARIA,
        CONCEPTO,
        SUM(MONTO) as MONTO_TOTAL
    FROM OTRA_TABLA
    WHERE FECHA_DATOS = 'tu_fecha_here'
        AND CONCEPTO = '15701'
    GROUP BY FECHA_DATOS, SUBSIDIARIA, CONCEPTO
),
combinacion_base AS (
    SELECT 
        fecha.FECHA_DATOS,
        subsidiarias.SUBSIDIARIA
    FROM (SELECT DISTINCT FECHA_DATOS FROM ENTRADAS WHERE FECHA_DATOS = 'tu_fecha_here') fecha
    CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
),
datos_completos AS (
    SELECT 
        cb.FECHA_DATOS,
        cb.SUBSIDIARIA,
        -- Concepto A (10376)
        (SELECT MONTO_TOTAL FROM datos_entradas 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '10376') AS MONTO_A,
        
        -- Concepto C (1093)
        (SELECT MONTO_TOTAL FROM datos_entradas 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '1093') AS MONTO_C,
        
        -- Concepto B (15701) desde otra tabla
        (SELECT MONTO_TOTAL FROM datos_otra_tabla 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '15701') AS MONTO_B
    FROM combinacion_base cb
)
SELECT 
    FECHA_DATOS,
    SUBSIDIARIA,
    '1093' AS CONCEPTO_C,
    MONTO_C,
    '10376' AS CONCEPTO_A,
    MONTO_A,
    '15701' AS CONCEPTO_B,
    MONTO_B,
    CASE 
        WHEN MONTO_C IS NULL THEN NULL
        WHEN MONTO_C > 0 AND MONTO_A IS NOT NULL AND MONTO_B IS NOT NULL THEN
            CASE 
                WHEN MONTO_A >= CASE WHEN (MONTO_C - MONTO_B) > 0 THEN (MONTO_C - MONTO_B) ELSE 0 END
                   AND MONTO_A <= MONTO_C 
                THEN 1 
                ELSE 2 
            END
        ELSE 2
    END AS RESULTADO
FROM datos_completos; 

----3---

SELECT 
    fecha.FECHA_DATOS,
    subsidiarias.SUBSIDIARIA,
    '10378' AS CONCEPTO_T,
    SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE NULL END) AS MONTO_T,
    '10386' AS CONCEPTO_O,
    SUM(CASE WHEN e.CONCEPTO = '10386' THEN e.MONTO ELSE NULL END) AS MONTO_O,
    CASE 
        WHEN SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE NULL END) IS NULL THEN NULL
        WHEN SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE 0 END) > 0 
            AND SUM(CASE WHEN e.CONCEPTO = '10386' THEN e.MONTO ELSE 0 END) > 0
        THEN 1 
        ELSE 2 
    END AS RESULTADO
FROM (SELECT 'tu_fecha_here' AS FECHA_DATOS) fecha
CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
LEFT JOIN ENTRADAS e ON fecha.FECHA_DATOS = e.FECHA_DATOS 
    AND subsidiarias.SUBSIDIARIA = e.SUBSIDIARIA
    AND e.CONCEPTO IN ('10378', '10386')
GROUP BY fecha.FECHA_DATOS, subsidiarias.SUBSIDIARIA;



rrr

SELECT 
    CRED, 
    NUM_CRED,
    COUNT(DISTINCT nombre) AS variaciones_nombre,
    COUNT(DISTINCT rfc) AS variaciones_rfc,
    COUNT(DISTINCT numero_cliente) AS variaciones_num_cliente,
    COUNT(DISTINCT curp) AS variaciones_curp,
    COUNT(*) AS total_registros
FROM 
    tu_tabla
GROUP BY 
    CRED, NUM_CRED
HAVING 
    COUNT(DISTINCT nombre) > 1 
    OR COUNT(DISTINCT rfc) > 1
    OR COUNT(DISTINCT numero_cliente) > 1
    OR COUNT(DISTINCT curp) > 1;


SELECT 
    COALESCE(A.CRED, H.CRED) AS CRED,
    COALESCE(A.NUM_CRED, H.NUM_CRED) AS NUM_CRED,
    CASE 
        WHEN A.CRED IS NULL THEN 'FALTA_EN_TABLA_ACTUAL'
        WHEN H.CRED IS NULL THEN 'FALTA_EN_TABLA_HISTORICA'
        ELSE 'PRESENTE_EN_AMBAS'
    END AS ESTADO_REGISTRO,
    CASE 
        WHEN A.NOMBRE != H.NOMBRE THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS NOMBRE,
    CASE 
        WHEN A.RFC != H.RFC THEN 'INCONSISTENTE' 
        ELSE 'COHERENTE'
    END AS RFC,
    CASE 
        WHEN A.NUMERO_CLIENTE != H.NUMERO_CLIENTE THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS NUMERO_CLIENTE,
    CASE 
        WHEN A.CURP != H.CURP THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS CURP
FROM 
    TABLA_ACTUAL A
FULL OUTER JOIN 
    TABLA_HISTORICA H ON A.CRED = H.CRED AND A.NUM_CRED = H.NUM_CRED
WHERE 
    (A.CRED IS NULL OR H.CRED IS NULL)  -- Encuentra registros que faltan en una tabla
    OR (
        A.NOMBRE != H.NOMBRE
        OR A.RFC != H.RFC
        OR A.NUMERO_CLIENTE != H.NUMERO_CLIENTE
        OR A.CURP != H.CURP
    );  -- O encuentra registros con datos inconsistentes


jjjjjjj

WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL  -- aquí filtras el periodo deseado
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.CRED,
  a.NUM_CRED,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  CASE WHEN a.NOMBRE <> h.NOMBRE THEN h.NOMBRE ELSE NULL END AS NOMBRE_DIF,
  CASE WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN h.NUM_CLIENTE ELSE NULL END AS NUM_CLIENTE_DIF,
  CASE WHEN a.RFC <> h.RFC THEN h.RFC ELSE NULL END AS RFC_DIF
FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;

-------i
WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    COUNT(DISTINCT NOMBRE) AS nombres_distintos,
    COUNT(DISTINCT NUM_CLIENTE) AS num_cli_distintos,
    COUNT(DISTINCT RFC) AS rfc_distintos
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL
  GROUP BY CRED, NUM_CRED, CRED || '_' || NUM_CRED
)
SELECT
  id_cliente,
  nombres_distintos,
  num_cli_distintos,
  rfc_distintos
FROM actual
WHERE nombres_distintos > 1
   OR num_cli_distintos > 1
   OR rfc_distintos > 1
ORDER BY id_cliente;


WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  CASE WHEN a.NOMBRE <> h.NOMBRE THEN h.NOMBRE ELSE NULL END AS NOMBRE_HIST_DIF,
  CASE WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN h.NUM_CLIENTE ELSE NULL END AS NUM_CLIENTE_HIST_DIF,
  CASE WHEN a.RFC <> h.RFC THEN h.RFC ELSE NULL END AS RFC_HIST_DIF
FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;

kkkkkk

WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL  -- 👈 filtra el periodo a validar
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  
  -- 🔹 NOMBRE
  a.NOMBRE AS NOMBRE_ACTUAL,
  h.NOMBRE AS NOMBRE_HIST,
  CASE 
    WHEN a.NOMBRE <> h.NOMBRE THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_NOMBRE,
  
  -- 🔹 NUM_CLIENTE
  a.NUM_CLIENTE AS NUM_CLIENTE_ACTUAL,
  h.NUM_CLIENTE AS NUM_CLIENTE_HIST,
  CASE 
    WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_NUM_CLIENTE,
  
  -- 🔹 RFC
  a.RFC AS RFC_ACTUAL,
  h.RFC AS RFC_HIST,
  CASE 
    WHEN a.RFC <> h.RFC THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_RFC

FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;


---228
WITH fecha_max AS (
    SELECT MAX(FECHA_DATOS) as FECHA_MAXIMA
    FROM SALIDAS
),
fecha_sig AS (
    SELECT MIN(FECHA_DATOS) as FECHA_SIGUIENTE
    FROM SALIDAS
    WHERE FECHA_DATOS > 'tu_fecha_actual'
),
datos_ak AS (
    -- Ak = 11030_t+1 (fecha siguiente)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AK
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
        AND CONCEPTO = '11030'
    GROUP BY SUBSIDIARIA
),
datos_al AS (
    -- Al = Abs(Min[(11000+11010)_t+1 - (10980)_t, 0])
    SELECT 
        s_siguiente.SUBSIDIARIA,
        ABS(
            CASE WHEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0)) < 0 
                 THEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0))
                 ELSE 0 
            END
        ) as MONTO_AL
    FROM (
        -- (11000+11010)_t+1 (fecha siguiente)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as SUMA_SIGUIENTE
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
            AND CONCEPTO IN ('11000', '11010')
        GROUP BY SUBSIDIARIA
    ) s_siguiente
    LEFT JOIN (
        -- (10980)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as MONTO_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO = '10980'
        GROUP BY SUBSIDIARIA
    ) s_actual ON s_siguiente.SUBSIDIARIA = s_actual.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_ACTUAL,
    (SELECT FECHA_SIGUIENTE FROM fecha_sig) AS FECHA_SIGUIENTE,
    (SELECT FECHA_MAXIMA FROM fecha_max) AS FECHA_MAXIMA_BASE,
    cb.SUBSIDIARIA,
    '11030' AS CONCEPTO_AK,
    COALESCE(dak.MONTO_AK, 0) AS MONTO_AK,
    'Abs(Min[(11000+11010)_t+1 - (10980)_t, 0])' AS CONCEPTO_AL,
    COALESCE(dal.MONTO_AL, 0) AS MONTO_AL,
    CASE 
        WHEN 'tu_fecha_actual' = (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            NULL  -- No aplicar validación
        WHEN 'tu_fecha_actual' < (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            CASE 
                WHEN COALESCE(dak.MONTO_AK, 0) BETWEEN 
                    COALESCE(dal.MONTO_AL, 0) * 0.99 AND COALESCE(dal.MONTO_AL, 0) * 1.01
                THEN 1  -- ✅ Dentro de tolerancia
                ELSE 0  -- ❌ Fuera de tolerancia
            END
        ELSE NULL  -- Por seguridad (no debería pasar)
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_ak dak ON cb.SUBSIDIARIA = dak.SUBSIDIARIA
LEFT JOIN datos_al dal ON cb.SUBSIDIARIA = dal.SUBSIDIARIA;



---232--
WITH fecha_anterior AS (
    SELECT MAX(FECHA_DATOS) as FECHA_ANTERIOR
    FROM SALIDAS 
    WHERE FECHA_DATOS < 'tu_fecha_actual'
),
datos_as AS (
    -- As = 11080_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AS
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11080'
    GROUP BY SUBSIDIARIA
),
datos_at AS (
    -- At = 11050_t-1 (fecha anterior)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AT
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_ANTERIOR FROM fecha_anterior)
        AND CONCEPTO = '11050'
    GROUP BY SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_DATOS,
    (SELECT FECHA_ANTERIOR FROM fecha_anterior) AS FECHA_ANTERIOR,
    cb.SUBSIDIARIA,
    '11080' AS CONCEPTO_AS,
    COALESCE(das.MONTO_AS, 0) AS MONTO_AS,
    '11050' AS CONCEPTO_AT,
    COALESCE(dat.MONTO_AT, 0) AS MONTO_AT,
    CASE 
        WHEN COALESCE(das.MONTO_AS, 0) <= COALESCE(dat.MONTO_AT, 0)
        THEN 1  -- ✅ Cumple (As <= At)
        ELSE 2   -- ❌ No cumple (As > At)
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_as das ON cb.SUBSIDIARIA = das.SUBSIDIARIA
LEFT JOIN datos_at dat ON cb.SUBSIDIARIA = dat.SUBSIDIARIA;


---233---
WITH fecha_max AS (
    SELECT MAX(FECHA_DATOS) as FECHA_MAXIMA
    FROM SALIDAS
),
fecha_sig AS (
    SELECT MIN(FECHA_DATOS) as FECHA_SIGUIENTE
    FROM SALIDAS
    WHERE FECHA_DATOS > 'tu_fecha_actual'
),
datos_au AS (
    -- Au = 11050_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AU
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11050'
    GROUP BY SUBSIDIARIA
),
datos_av AS (
    -- Av = 11080_t+1 (fecha siguiente)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AV
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
        AND CONCEPTO = '11080'
    GROUP BY SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_ACTUAL,
    (SELECT FECHA_SIGUIENTE FROM fecha_sig) AS FECHA_SIGUIENTE,
    (SELECT FECHA_MAXIMA FROM fecha_max) AS FECHA_MAXIMA_BASE,
    cb.SUBSIDIARIA,
    '11050' AS CONCEPTO_AU,
    COALESCE(dau.MONTO_AU, 0) AS MONTO_AU,
    '11080' AS CONCEPTO_AV,
    COALESCE(dav.MONTO_AV, 0) AS MONTO_AV,
    CASE 
        WHEN 'tu_fecha_actual' = (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            NULL  -- No activar validación
        WHEN 'tu_fecha_actual' < (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            CASE 
                WHEN COALESCE(dau.MONTO_AU, 0) >= COALESCE(dav.MONTO_AV, 0)
                THEN NULL  -- ✅ No detonar (Au >= Av)
                ELSE 1     -- ❌ Detonar alerta (Au < Av)
            END
        ELSE NULL  -- Por seguridad
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_au dau ON cb.SUBSIDIARIA = dau.SUBSIDIARIA
LEFT JOIN datos_av dav ON cb.SUBSIDIARIA = dav.SUBSIDIARIA;

--234--
WITH fecha_anterior AS (
    SELECT MAX(FECHA_DATOS) as FECHA_ANTERIOR
    FROM SALIDAS 
    WHERE FECHA_DATOS < 'tu_fecha_actual'
),
datos_aw AS (
    -- Aw = 11090_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AW
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11090'
    GROUP BY SUBSIDIARIA
),
datos_ax AS (
    -- Ax = Max[(11070+11080)_t - (11050)_t-1, 0]
    SELECT 
        s_actual.SUBSIDIARIA,
        CASE 
            WHEN (COALESCE(s_actual.SUMA_ACTUAL, 0) - COALESCE(s_anterior.MONTO_ANTERIOR, 0)) > 0 
            THEN (COALESCE(s_actual.SUMA_ACTUAL, 0) - COALESCE(s_anterior.MONTO_ANTERIOR, 0))
            ELSE 0 
        END as MONTO_AX
    FROM (
        -- (11070+11080)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as SUMA_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO IN ('11070', '11080')
        GROUP BY SUBSIDIARIA
    ) s_actual
    LEFT JOIN (
        -- (11050)_t-1 (fecha anterior)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as MONTO_ANTERIOR
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_ANTERIOR FROM fecha_anterior)
            AND CONCEPTO = '11050'
        GROUP BY SUBSIDIARIA
    ) s_anterior ON s_actual.SUBSIDIARIA = s_anterior.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_DATOS,
    (SELECT FECHA_ANTERIOR FROM fecha_anterior) AS FECHA_ANTERIOR,
    cb.SUBSIDIARIA,
    '11090' AS CONCEPTO_AW,
    COALESCE(daw.MONTO_AW, 0) AS MONTO_AW,
    'Max[(11070+11080)_t - (11050)_t-1, 0]' AS CONCEPTO_AX,
    COALESCE(dax.MONTO_AX, 0) AS MONTO_AX,
    CASE 
        WHEN COALESCE(daw.MONTO_AW, 0) BETWEEN 
            COALESCE(dax.MONTO_AX, 0) * 0.99 AND COALESCE(dax.MONTO_AX, 0) * 1.01
        THEN 1  -- ✅ Cumple (Aw está dentro de ±1% de Ax)
        ELSE 2   -- ❌ No cumple
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_aw daw ON cb.SUBSIDIARIA = daw.SUBSIDIARIA
LEFT JOIN datos_ax dax ON cb.SUBSIDIARIA = dax.SUBSIDIARIA;


---235---soluciones null como true
WITH fecha_anterior AS (
    SELECT MAX(FECHA_DATOS) as FECHA_ANTERIOR
    FROM SALIDAS 
    WHERE FECHA_DATOS < 'tu_fecha_actual'
),
datos_ay AS (
    -- Ay = 11100_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_AY
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11100'
    GROUP BY SUBSIDIARIA
),
datos_az AS (
    -- Az = Abs(Min[(11070+11080)_t - (11050)_t-1, 0])
    SELECT 
        s_actual.SUBSIDIARIA,
        CASE 
            WHEN s_anterior.MONTO_ANTERIOR IS NULL THEN NULL
            ELSE ABS(
                CASE WHEN (COALESCE(s_actual.SUMA_ACTUAL, 0) - s_anterior.MONTO_ANTERIOR) < 0 
                     THEN (COALESCE(s_actual.SUMA_ACTUAL, 0) - s_anterior.MONTO_ANTERIOR)
                     ELSE 0 
                END
            )
        END as MONTO_AZ
    FROM (
        -- (11070+11080)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as SUMA_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO IN ('11070', '11080')
        GROUP BY SUBSIDIARIA
    ) s_actual
    LEFT JOIN (
        -- (11050)_t-1 (fecha anterior)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as MONTO_ANTERIOR
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_ANTERIOR FROM fecha_anterior)
            AND CONCEPTO = '11050'
        GROUP BY SUBSIDIARIA
    ) s_anterior ON s_actual.SUBSIDIARIA = s_anterior.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_DATOS,
    (SELECT FECHA_ANTERIOR FROM fecha_anterior) AS FECHA_ANTERIOR,
    cb.SUBSIDIARIA,
    '11100' AS CONCEPTO_AY,
    day.MONTO_AY,
    'Abs(Min[(11070+11080)_t - (11050)_t-1, 0])' AS CONCEPTO_AZ,
    daz.MONTO_AZ,
    CASE 
        WHEN day.MONTO_AY IS NULL OR daz.MONTO_AZ IS NULL THEN 2  -- ❌ No cumple (algún concepto es NULL)
        WHEN day.MONTO_AY BETWEEN daz.MONTO_AZ * 0.99 AND daz.MONTO_AZ * 1.01
        THEN 1  -- ✅ Cumple (Ay está dentro de ±1% de Az)
        ELSE 2   -- ❌ No cumple
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_ay day ON cb.SUBSIDIARIA = day.SUBSIDIARIA
LEFT JOIN datos_az daz ON cb.SUBSIDIARIA = daz.SUBSIDIARIA;


--236
WITH fecha_max AS (
    SELECT MAX(FECHA_DATOS) as FECHA_MAXIMA
    FROM SALIDAS
),
fecha_sig AS (
    SELECT MIN(FECHA_DATOS) as FECHA_SIGUIENTE
    FROM SALIDAS
    WHERE FECHA_DATOS > 'tu_fecha_actual'
),
datos_ba AS (
    -- Ba = 11090_t+1 (fecha siguiente)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_BA
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
        AND CONCEPTO = '11090'
    GROUP BY SUBSIDIARIA
),
datos_bb AS (
    -- Bb = Max[(11070+11080)_t+1 - (11050)_t, 0]
    SELECT 
        s_siguiente.SUBSIDIARIA,
        CASE 
            WHEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0)) > 0 
            THEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0))
            ELSE 0 
        END as MONTO_BB
    FROM (
        -- (11070+11080)_t+1 (fecha siguiente)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as SUMA_SIGUIENTE
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
            AND CONCEPTO IN ('11070', '11080')
        GROUP BY SUBSIDIARIA
    ) s_siguiente
    LEFT JOIN (
        -- (11050)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as MONTO_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO = '11050'
        GROUP BY SUBSIDIARIA
    ) s_actual ON s_siguiente.SUBSIDIARIA = s_actual.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_ACTUAL,
    (SELECT FECHA_SIGUIENTE FROM fecha_sig) AS FECHA_SIGUIENTE,
    (SELECT FECHA_MAXIMA FROM fecha_max) AS FECHA_MAXIMA_BASE,
    cb.SUBSIDIARIA,
    '11090' AS CONCEPTO_BA,
    COALESCE(dba.MONTO_BA, 0) AS MONTO_BA,
    'Max[(11070+11080)_t+1 - (11050)_t, 0]' AS CONCEPTO_BB,
    COALESCE(dbb.MONTO_BB, 0) AS MONTO_BB,
    CASE 
        WHEN 'tu_fecha_actual' = (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            NULL  -- No activar validación
        WHEN 'tu_fecha_actual' < (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            CASE 
                WHEN COALESCE(dba.MONTO_BA, 0) BETWEEN 
                    COALESCE(dbb.MONTO_BB, 0) * 0.99 AND COALESCE(dbb.MONTO_BB, 0) * 1.01
                THEN NULL  -- ✅ No detonar (Ba = Bb dentro de tolerancia)
                ELSE 1     -- ❌ Detonar alerta (Ba ≠ Bb)
            END
        ELSE NULL  -- Por seguridad
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_ba dba ON cb.SUBSIDIARIA = dba.SUBSIDIARIA
LEFT JOIN datos_bb dbb ON cb.SUBSIDIARIA = dbb.SUBSIDIARIA;


--237--
WITH fecha_max AS (
    SELECT MAX(FECHA_DATOS) as FECHA_MAXIMA
    FROM SALIDAS
),
fecha_sig AS (
    SELECT MIN(FECHA_DATOS) as FECHA_SIGUIENTE
    FROM SALIDAS
    WHERE FECHA_DATOS > 'tu_fecha_actual'
),
datos_bc AS (
    -- Bc = 11100_t+1 (fecha siguiente)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_BC
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
        AND CONCEPTO = '11100'
    GROUP BY SUBSIDIARIA
),
datos_bd AS (
    -- Bd = Abs(Min[(11070+11080)_t+1 - (11050)_t, 0])
    SELECT 
        s_siguiente.SUBSIDIARIA,
        ABS(
            CASE WHEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0)) < 0 
                 THEN (COALESCE(s_siguiente.SUMA_SIGUIENTE, 0) - COALESCE(s_actual.MONTO_ACTUAL, 0))
                 ELSE 0 
            END
        ) as MONTO_BD
    FROM (
        -- (11070+11080)_t+1 (fecha siguiente)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as SUMA_SIGUIENTE
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE FROM fecha_sig)
            AND CONCEPTO IN ('11070', '11080')
        GROUP BY SUBSIDIARIA
    ) s_siguiente
    LEFT JOIN (
        -- (11050)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            SUM(MONTO) as MONTO_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO = '11050'
        GROUP BY SUBSIDIARIA
    ) s_actual ON s_siguiente.SUBSIDIARIA = s_actual.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_ACTUAL,
    (SELECT FECHA_SIGUIENTE FROM fecha_sig) AS FECHA_SIGUIENTE,
    (SELECT FECHA_MAXIMA FROM fecha_max) AS FECHA_MAXIMA_BASE,
    cb.SUBSIDIARIA,
    '11100' AS CONCEPTO_BC,
    COALESCE(dbc.MONTO_BC, 0) AS MONTO_BC,
    'Abs(Min[(11070+11080)_t+1 - (11050)_t, 0])' AS CONCEPTO_BD,
    COALESCE(dbd.MONTO_BD, 0) AS MONTO_BD,
    CASE 
        WHEN 'tu_fecha_actual' = (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            NULL  -- No activar validación
        WHEN 'tu_fecha_actual' < (SELECT FECHA_MAXIMA FROM fecha_max) THEN
            CASE 
                WHEN COALESCE(dbc.MONTO_BC, 0) BETWEEN 
                    COALESCE(dbd.MONTO_BD, 0) * 0.99 AND COALESCE(dbd.MONTO_BD, 0) * 1.01
                THEN NULL  -- ✅ No detonar (Bc = Bd dentro de tolerancia)
                ELSE 1     -- ❌ Detonar alerta (Bc ≠ Bd)
            END
        ELSE NULL  -- Por seguridad
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_bc dbc ON cb.SUBSIDIARIA = dbc.SUBSIDIARIA
LEFT JOIN datos_bd dbd ON cb.SUBSIDIARIA = dbd.SUBSIDIARIA;



--244--
WITH fecha_anterior_30 AS (
    SELECT DATE('tu_fecha_actual', '-30 days') AS FECHA_ANTERIOR_30
),
datos_bq AS (
    -- Bq = 11170_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_BQ
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11170'
    GROUP BY SUBSIDIARIA
),
datos_br AS (
    -- Br = Max[(11121-11122)_t - (11121-11122)_t-30, 0]
    SELECT 
        s_actual.SUBSIDIARIA,
        CASE 
            WHEN ((s_actual.DIFERENCIA_ACTUAL - COALESCE(s_anterior.DIFERENCIA_ANTERIOR, 0)) > 0)
            THEN (s_actual.DIFERENCIA_ACTUAL - COALESCE(s_anterior.DIFERENCIA_ANTERIOR, 0))
            ELSE 0 
        END as MONTO_BR
    FROM (
        -- (11121-11122)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_actual
    LEFT JOIN (
        -- (11121-11122)_t-30 (30 días antes)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_ANTERIOR
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_ANTERIOR_30 FROM fecha_anterior_30)
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_anterior ON s_actual.SUBSIDIARIA = s_anterior.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_DATOS,
    (SELECT FECHA_ANTERIOR_30 FROM fecha_anterior_30) AS FECHA_ANTERIOR_30,
    cb.SUBSIDIARIA,
    '11170' AS CONCEPTO_BQ,
    COALESCE(dbq.MONTO_BQ, 0) AS MONTO_BQ,
    'Max[(11121-11122)_t - (11121-11122)_t-30, 0]' AS CONCEPTO_BR,
    COALESCE(dbr.MONTO_BR, 0) AS MONTO_BR,
    CASE 
        WHEN COALESCE(dbq.MONTO_BQ, 0) BETWEEN 
            COALESCE(dbr.MONTO_BR, 0) * 0.99 AND COALESCE(dbr.MONTO_BR, 0) * 1.01
        THEN 1  -- ✅ Cumple (Bq está dentro de ±1% de Br)
        ELSE 2   -- ❌ No cumple
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_bq dbq ON cb.SUBSIDIARIA = dbq.SUBSIDIARIA
LEFT JOIN datos_br dbr ON cb.SUBSIDIARIA = dbr.SUBSIDIARIA;

--245--
WITH fecha_anterior_30 AS (
    SELECT DATE('tu_fecha_actual', '-30 days') AS FECHA_ANTERIOR_30
),
datos_bs AS (
    -- Bs = 11180_t (fecha actual)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_BS
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
        AND CONCEPTO = '11180'
    GROUP BY SUBSIDIARIA
),
datos_bt AS (
    -- Bt = Abs(Min[(11121-11122)_t - (11121-11122)_t-30, 0])
    SELECT 
        s_actual.SUBSIDIARIA,
        ABS(
            CASE WHEN ((s_actual.DIFERENCIA_ACTUAL - COALESCE(s_anterior.DIFERENCIA_ANTERIOR, 0)) < 0)
                 THEN (s_actual.DIFERENCIA_ACTUAL - COALESCE(s_anterior.DIFERENCIA_ANTERIOR, 0))
                 ELSE 0 
            END
        ) as MONTO_BT
    FROM (
        -- (11121-11122)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_actual
    LEFT JOIN (
        -- (11121-11122)_t-30 (30 días antes)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_ANTERIOR
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_ANTERIOR_30 FROM fecha_anterior_30)
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_anterior ON s_actual.SUBSIDIARIA = s_anterior.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_DATOS,
    (SELECT FECHA_ANTERIOR_30 FROM fecha_anterior_30) AS FECHA_ANTERIOR_30,
    cb.SUBSIDIARIA,
    '11180' AS CONCEPTO_BS,
    COALESCE(dbs.MONTO_BS, 0) AS MONTO_BS,
    'Abs(Min[(11121-11122)_t - (11121-11122)_t-30, 0])' AS CONCEPTO_BT,
    COALESCE(dbt.MONTO_BT, 0) AS MONTO_BT,
    CASE 
        WHEN dbs.MONTO_BS IS NULL OR dbt.MONTO_BT IS NULL THEN NULL  -- ✅ No hay datos
        WHEN COALESCE(dbs.MONTO_BS, 0) BETWEEN 
            COALESCE(dbt.MONTO_BT, 0) * 0.99 AND COALESCE(dbt.MONTO_BT, 0) * 1.01
        THEN 1  -- ✅ Cumple (Bs está dentro de ±1% de Bt)
        ELSE 2   -- ❌ No cumple
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_bs dbs ON cb.SUBSIDIARIA = dbs.SUBSIDIARIA
LEFT JOIN datos_bt dbt ON cb.SUBSIDIARIA = dbt.SUBSIDIARIA;

--246--
WITH fecha_max AS (
    SELECT MAX(FECHA_DATOS) as FECHA_MAXIMA
    FROM SALIDAS
),
fecha_sig_30 AS (
    SELECT DATE('tu_fecha_actual', '+30 days') AS FECHA_SIGUIENTE_30
),
datos_bu AS (
    -- Bu = 11170_t+30 (30 días después)
    SELECT 
        SUBSIDIARIA,
        SUM(MONTO) as MONTO_BU
    FROM SALIDAS
    WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE_30 FROM fecha_sig_30)
        AND CONCEPTO = '11170'
    GROUP BY SUBSIDIARIA
),
datos_bv AS (
    -- Bv = Max[(11121-11122)_t+30 - (11121-11122)_t, 0]
    SELECT 
        s_siguiente.SUBSIDIARIA,
        CASE 
            WHEN ((s_siguiente.DIFERENCIA_SIGUIENTE - COALESCE(s_actual.DIFERENCIA_ACTUAL, 0)) > 0)
            THEN (s_siguiente.DIFERENCIA_SIGUIENTE - COALESCE(s_actual.DIFERENCIA_ACTUAL, 0))
            ELSE 0 
        END as MONTO_BV
    FROM (
        -- (11121-11122)_t+30 (30 días después)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_SIGUIENTE
        FROM SALIDAS
        WHERE FECHA_DATOS = (SELECT FECHA_SIGUIENTE_30 FROM fecha_sig_30)
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_siguiente
    LEFT JOIN (
        -- (11121-11122)_t (fecha actual)
        SELECT 
            SUBSIDIARIA,
            (SUM(CASE WHEN CONCEPTO = '11121' THEN MONTO ELSE 0 END) - 
             SUM(CASE WHEN CONCEPTO = '11122' THEN MONTO ELSE 0 END)) as DIFERENCIA_ACTUAL
        FROM SALIDAS
        WHERE FECHA_DATOS = 'tu_fecha_actual'
            AND CONCEPTO IN ('11121', '11122')
        GROUP BY SUBSIDIARIA
    ) s_actual ON s_siguiente.SUBSIDIARIA = s_actual.SUBSIDIARIA
),
combinacion_base AS (
    SELECT DISTINCT SUBSIDIARIA 
    FROM SALIDAS
    WHERE FECHA_DATOS = 'tu_fecha_actual'
)
SELECT 
    'tu_fecha_actual' AS FECHA_ACTUAL,
    (SELECT FECHA_SIGUIENTE_30 FROM fecha_sig_30) AS FECHA_SIGUIENTE_30,
    (SELECT FECHA_MAXIMA FROM fecha_max) AS FECHA_MAXIMA_BASE,
    cb.SUBSIDIARIA,
    '11170' AS CONCEPTO_BU,
    COALESCE(dbu.MONTO_BU, 0) AS MONTO_BU,
    'Max[(11121-11122)_t+30 - (11121-11122)_t, 0]' AS CONCEPTO_BV,
    COALESCE(dbv.MONTO_BV, 0) AS MONTO_BV,
    CASE 
        WHEN JULIANDAY((SELECT FECHA_MAXIMA FROM fecha_max)) - JULIANDAY('tu_fecha_actual') < 30 THEN
            NULL  -- No activar validación (menos de 30 días de diferencia)
        WHEN dbu.MONTO_BU IS NULL OR dbv.MONTO_BV IS NULL THEN NULL  -- No hay datos
        WHEN COALESCE(dbu.MONTO_BU, 0) BETWEEN 
            COALESCE(dbv.MONTO_BV, 0) * 0.99 AND COALESCE(dbv.MONTO_BV, 0) * 1.01
        THEN NULL  -- ✅ No detonar (Bu = Bv dentro de tolerancia)
        ELSE 1     -- ❌ Detonar alerta (Bu ≠ Bv)
    END AS RESULTADO
FROM combinacion_base cb
LEFT JOIN datos_bu dbu ON cb.SUBSIDIARIA = dbu.SUBSIDIARIA
LEFT JOIN datos_bv dbv ON cb.SUBSIDIARIA = dbv.SUBSIDIARIA;
