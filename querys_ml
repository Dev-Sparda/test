SELECT 
    fecha.FECHA_DATOS,
    subsidiarias.SUBSIDIARIA
    '15694' AS CONCEPTO_C,
    SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE NULL END) AS MONTO_C,
    '15685' AS CONCEPTO_A,
    SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE NULL END) AS MONTO_A,
    '15683' AS CONCEPTO_B,
    SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE NULL END) AS MONTO_B,
    CASE 
        WHEN SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE NULL END) IS NULL THEN NULL
        WHEN SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) > 0 
            AND SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE 0 END) >= 
                CASE WHEN (SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) - 
                          SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE 0 END)) > 0 
                     THEN (SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END) - 
                           SUM(CASE WHEN e.CONCEPTO = '15683' THEN e.MONTO ELSE 0 END))
                     ELSE 0 
                END
            AND SUM(CASE WHEN e.CONCEPTO = '15685' THEN e.MONTO ELSE 0 END) <= 
                SUM(CASE WHEN e.CONCEPTO = '15694' THEN e.MONTO ELSE 0 END)
        THEN 1 
        ELSE 2 
    END AS RESULTADO
FROM (SELECT 'tu_fecha_here' AS FECHA_DATOS) fecha
CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
LEFT JOIN ENTRADAS e ON fecha.FECHA_DATOS = e.FECHA_DATOS 
    AND subsidiarias.SUBSIDIARIA = e.SUBSIDIARIA
    AND e.CONCEPTO IN ('15685', '15694', '15683')
GROUP BY fecha.FECHA_DATOS, subsidiarias.SUBSIDIARIA;


----2----
WITH datos_entradas AS (
    SELECT 
        FECHA_DATOS,
        SUBSIDIARIA,
        CONCEPTO,
        SUM(MONTO) as MONTO_TOTAL
    FROM ENTRADAS
    WHERE FECHA_DATOS = 'tu_fecha_here'
        AND CONCEPTO IN ('10376', '1093')
    GROUP BY FECHA_DATOS, SUBSIDIARIA, CONCEPTO
),
datos_otra_tabla AS (
    SELECT 
        FECHA_DATOS,
        SUBSIDIARIA,
        CONCEPTO,
        SUM(MONTO) as MONTO_TOTAL
    FROM OTRA_TABLA
    WHERE FECHA_DATOS = 'tu_fecha_here'
        AND CONCEPTO = '15701'
    GROUP BY FECHA_DATOS, SUBSIDIARIA, CONCEPTO
),
combinacion_base AS (
    SELECT 
        fecha.FECHA_DATOS,
        subsidiarias.SUBSIDIARIA
    FROM (SELECT DISTINCT FECHA_DATOS FROM ENTRADAS WHERE FECHA_DATOS = 'tu_fecha_here') fecha
    CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
),
datos_completos AS (
    SELECT 
        cb.FECHA_DATOS,
        cb.SUBSIDIARIA,
        -- Concepto A (10376)
        (SELECT MONTO_TOTAL FROM datos_entradas 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '10376') AS MONTO_A,
        
        -- Concepto C (1093)
        (SELECT MONTO_TOTAL FROM datos_entradas 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '1093') AS MONTO_C,
        
        -- Concepto B (15701) desde otra tabla
        (SELECT MONTO_TOTAL FROM datos_otra_tabla 
         WHERE FECHA_DATOS = cb.FECHA_DATOS 
         AND SUBSIDIARIA = cb.SUBSIDIARIA 
         AND CONCEPTO = '15701') AS MONTO_B
    FROM combinacion_base cb
)
SELECT 
    FECHA_DATOS,
    SUBSIDIARIA,
    '1093' AS CONCEPTO_C,
    MONTO_C,
    '10376' AS CONCEPTO_A,
    MONTO_A,
    '15701' AS CONCEPTO_B,
    MONTO_B,
    CASE 
        WHEN MONTO_C IS NULL THEN NULL
        WHEN MONTO_C > 0 AND MONTO_A IS NOT NULL AND MONTO_B IS NOT NULL THEN
            CASE 
                WHEN MONTO_A >= CASE WHEN (MONTO_C - MONTO_B) > 0 THEN (MONTO_C - MONTO_B) ELSE 0 END
                   AND MONTO_A <= MONTO_C 
                THEN 1 
                ELSE 2 
            END
        ELSE 2
    END AS RESULTADO
FROM datos_completos; 

----3---

SELECT 
    fecha.FECHA_DATOS,
    subsidiarias.SUBSIDIARIA,
    '10378' AS CONCEPTO_T,
    SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE NULL END) AS MONTO_T,
    '10386' AS CONCEPTO_O,
    SUM(CASE WHEN e.CONCEPTO = '10386' THEN e.MONTO ELSE NULL END) AS MONTO_O,
    CASE 
        WHEN SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE NULL END) IS NULL THEN NULL
        WHEN SUM(CASE WHEN e.CONCEPTO = '10378' THEN e.MONTO ELSE 0 END) > 0 
            AND SUM(CASE WHEN e.CONCEPTO = '10386' THEN e.MONTO ELSE 0 END) > 0
        THEN 1 
        ELSE 2 
    END AS RESULTADO
FROM (SELECT 'tu_fecha_here' AS FECHA_DATOS) fecha
CROSS JOIN (SELECT DISTINCT SUBSIDIARIA FROM ENTRADAS) subsidiarias
LEFT JOIN ENTRADAS e ON fecha.FECHA_DATOS = e.FECHA_DATOS 
    AND subsidiarias.SUBSIDIARIA = e.SUBSIDIARIA
    AND e.CONCEPTO IN ('10378', '10386')
GROUP BY fecha.FECHA_DATOS, subsidiarias.SUBSIDIARIA;



rrr

SELECT 
    CRED, 
    NUM_CRED,
    COUNT(DISTINCT nombre) AS variaciones_nombre,
    COUNT(DISTINCT rfc) AS variaciones_rfc,
    COUNT(DISTINCT numero_cliente) AS variaciones_num_cliente,
    COUNT(DISTINCT curp) AS variaciones_curp,
    COUNT(*) AS total_registros
FROM 
    tu_tabla
GROUP BY 
    CRED, NUM_CRED
HAVING 
    COUNT(DISTINCT nombre) > 1 
    OR COUNT(DISTINCT rfc) > 1
    OR COUNT(DISTINCT numero_cliente) > 1
    OR COUNT(DISTINCT curp) > 1;


SELECT 
    COALESCE(A.CRED, H.CRED) AS CRED,
    COALESCE(A.NUM_CRED, H.NUM_CRED) AS NUM_CRED,
    CASE 
        WHEN A.CRED IS NULL THEN 'FALTA_EN_TABLA_ACTUAL'
        WHEN H.CRED IS NULL THEN 'FALTA_EN_TABLA_HISTORICA'
        ELSE 'PRESENTE_EN_AMBAS'
    END AS ESTADO_REGISTRO,
    CASE 
        WHEN A.NOMBRE != H.NOMBRE THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS NOMBRE,
    CASE 
        WHEN A.RFC != H.RFC THEN 'INCONSISTENTE' 
        ELSE 'COHERENTE'
    END AS RFC,
    CASE 
        WHEN A.NUMERO_CLIENTE != H.NUMERO_CLIENTE THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS NUMERO_CLIENTE,
    CASE 
        WHEN A.CURP != H.CURP THEN 'INCONSISTENTE'
        ELSE 'COHERENTE'
    END AS CURP
FROM 
    TABLA_ACTUAL A
FULL OUTER JOIN 
    TABLA_HISTORICA H ON A.CRED = H.CRED AND A.NUM_CRED = H.NUM_CRED
WHERE 
    (A.CRED IS NULL OR H.CRED IS NULL)  -- Encuentra registros que faltan en una tabla
    OR (
        A.NOMBRE != H.NOMBRE
        OR A.RFC != H.RFC
        OR A.NUMERO_CLIENTE != H.NUMERO_CLIENTE
        OR A.CURP != H.CURP
    );  -- O encuentra registros con datos inconsistentes


jjjjjjj

WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL  -- aquÃ­ filtras el periodo deseado
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.CRED,
  a.NUM_CRED,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  CASE WHEN a.NOMBRE <> h.NOMBRE THEN h.NOMBRE ELSE NULL END AS NOMBRE_DIF,
  CASE WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN h.NUM_CLIENTE ELSE NULL END AS NUM_CLIENTE_DIF,
  CASE WHEN a.RFC <> h.RFC THEN h.RFC ELSE NULL END AS RFC_DIF
FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;

-------i
WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    COUNT(DISTINCT NOMBRE) AS nombres_distintos,
    COUNT(DISTINCT NUM_CLIENTE) AS num_cli_distintos,
    COUNT(DISTINCT RFC) AS rfc_distintos
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL
  GROUP BY CRED, NUM_CRED, CRED || '_' || NUM_CRED
)
SELECT
  id_cliente,
  nombres_distintos,
  num_cli_distintos,
  rfc_distintos
FROM actual
WHERE nombres_distintos > 1
   OR num_cli_distintos > 1
   OR rfc_distintos > 1
ORDER BY id_cliente;


WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  CASE WHEN a.NOMBRE <> h.NOMBRE THEN h.NOMBRE ELSE NULL END AS NOMBRE_HIST_DIF,
  CASE WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN h.NUM_CLIENTE ELSE NULL END AS NUM_CLIENTE_HIST_DIF,
  CASE WHEN a.RFC <> h.RFC THEN h.RFC ELSE NULL END AS RFC_HIST_DIF
FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;

kkkkkk

WITH actual AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    CRED,
    NUM_CRED,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM tabla_492
  WHERE PERIODO = :PERIODO_ACTUAL  -- ðŸ‘ˆ filtra el periodo a validar
),
historico AS (
  SELECT
    CRED || '_' || NUM_CRED AS id_cliente,
    NOMBRE,
    NUM_CLIENTE,
    RFC,
    PERIODO
  FROM historico
)
SELECT
  a.id_cliente,
  a.PERIODO AS PERIODO_ACTUAL,
  h.PERIODO AS PERIODO_HIST,
  
  -- ðŸ”¹ NOMBRE
  a.NOMBRE AS NOMBRE_ACTUAL,
  h.NOMBRE AS NOMBRE_HIST,
  CASE 
    WHEN a.NOMBRE <> h.NOMBRE THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_NOMBRE,
  
  -- ðŸ”¹ NUM_CLIENTE
  a.NUM_CLIENTE AS NUM_CLIENTE_ACTUAL,
  h.NUM_CLIENTE AS NUM_CLIENTE_HIST,
  CASE 
    WHEN a.NUM_CLIENTE <> h.NUM_CLIENTE THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_NUM_CLIENTE,
  
  -- ðŸ”¹ RFC
  a.RFC AS RFC_ACTUAL,
  h.RFC AS RFC_HIST,
  CASE 
    WHEN a.RFC <> h.RFC THEN 'DIFERENTE' 
    ELSE NULL 
  END AS DIF_RFC

FROM actual a
JOIN historico h
  ON a.id_cliente = h.id_cliente
WHERE 
  (a.NOMBRE <> h.NOMBRE OR
   a.NUM_CLIENTE <> h.NUM_CLIENTE OR
   a.RFC <> h.RFC)
ORDER BY a.id_cliente, h.PERIODO;
